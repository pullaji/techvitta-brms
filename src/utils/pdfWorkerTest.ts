// PDF Worker Test Utility
// Tests if the PDF.js worker is properly configured and working

import * as pdfjsLib from 'pdfjs-dist';
import pdfWorker from 'pdfjs-dist/build/pdf.worker.min?url';

export function testPDFWorkerSetup(): boolean {
  try {
    console.log('üß™ Testing PDF.js worker setup...');
    
    // Set worker source
    pdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;
    
    console.log('‚úÖ Worker source set:', pdfjsLib.GlobalWorkerOptions.workerSrc);
    console.log('‚úÖ PDF.js version:', pdfjsLib.version);
    
    // Check if worker source is properly configured
    if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {
      console.error('‚ùå Worker source not configured');
      return false;
    }
    
    // Check if it's a local worker (not CDN)
    const workerSrc = pdfjsLib.GlobalWorkerOptions.workerSrc;
    if (workerSrc.startsWith('http')) {
      console.warn('‚ö†Ô∏è Using external CDN worker, this may cause issues in Vite');
      return false;
    }
    
    console.log('‚úÖ Local bundled worker configured correctly');
    return true;
    
  } catch (error) {
    console.error('‚ùå PDF worker setup failed:', error);
    return false;
  }
}

export async function testPDFProcessing(): Promise<boolean> {
  try {
    console.log('üß™ Testing PDF processing...');
    
    // Create a proper minimal PDF for testing (valid PDF structure)
    const testPDFData = new Uint8Array([
      // PDF header
      0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, 0x0A,
      // PDF comment
      0x25, 0xE2, 0xE3, 0xCF, 0xD3, 0x0A,
      // Object 1: Catalog
      0x31, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A,
      0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x43, 0x61, 0x74, 0x61, 0x6C, 0x6F, 0x67, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x3E, 0x3E, 0x0A,
      0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A,
      // Object 2: Pages
      0x32, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A,
      0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x73, 0x2F, 0x4B, 0x69, 0x64, 0x73, 0x5B, 0x33, 0x20, 0x30, 0x20, 0x52, 0x5D, 0x2F, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x20, 0x31, 0x3E, 0x3E, 0x0A,
      0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A,
      // Object 3: Page
      0x33, 0x20, 0x30, 0x20, 0x6F, 0x62, 0x6A, 0x0A,
      0x3C, 0x3C, 0x2F, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x50, 0x61, 0x67, 0x65, 0x2F, 0x50, 0x61, 0x72, 0x65, 0x6E, 0x74, 0x20, 0x32, 0x20, 0x30, 0x20, 0x52, 0x2F, 0x4D, 0x65, 0x64, 0x69, 0x61, 0x42, 0x6F, 0x78, 0x5B, 0x30, 0x20, 0x30, 0x20, 0x36, 0x31, 0x32, 0x20, 0x37, 0x39, 0x32, 0x5D, 0x3E, 0x3E, 0x0A,
      0x65, 0x6E, 0x64, 0x6F, 0x62, 0x6A, 0x0A,
      // Cross-reference table
      0x78, 0x72, 0x65, 0x66, 0x0A,
      0x30, 0x20, 0x34, 0x0A,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x36, 0x35, 0x35, 0x33, 0x35, 0x20, 0x66, 0x0A,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A,
      0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x6E, 0x0A,
      // Trailer
      0x74, 0x72, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x0A,
      0x3C, 0x3C, 0x2F, 0x53, 0x69, 0x7A, 0x65, 0x20, 0x34, 0x2F, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x31, 0x20, 0x30, 0x20, 0x52, 0x3E, 0x3E, 0x0A,
      0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66, 0x0A,
      0x31, 0x37, 0x37, 0x0A,
      0x25, 0x25, 0x45, 0x4F, 0x46
    ]);
    
    // Set worker source
    pdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;
    
    // Try to load the test PDF
    const loadingTask = pdfjsLib.getDocument({ data: testPDFData });
    const pdf = await loadingTask.promise;
    
    console.log('‚úÖ PDF loaded successfully');
    console.log('‚úÖ Pages:', pdf.numPages);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå PDF processing test failed:', error);
    console.error('Error details:', error);
    return false;
  }
}

export async function runPDFTests(): Promise<{
  setupTest: boolean;
  processingTest: boolean;
  overallSuccess: boolean;
}> {
  console.log('üöÄ Running PDF.js tests...');
  
  const setupTest = testPDFWorkerSetup();
  const processingTest = await testPDFProcessing();
  
  const overallSuccess = setupTest && processingTest;
  
  console.log('üìä Test Results:');
  console.log('- Setup Test:', setupTest ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('- Processing Test:', processingTest ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('- Overall:', overallSuccess ? '‚úÖ SUCCESS' : '‚ùå FAILURE');
  
  return {
    setupTest,
    processingTest,
    overallSuccess
  };
}
